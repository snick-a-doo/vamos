Vamos is an automotive simulation framework with an emphasis on thorough
physical modeling and good C++ design. Vamos includes a real-time, first-person,
3D driving application.

* TODO History

* TODO Features

* Requirements
The libraries are written in C++ so you need a compiler. It's an old project, but as I update, I won't be shy about using features from the latest standards. You'll probably need C++20. Recent GCC
releases should do fine.

The necessary libraries are
- [[https://www.openal.org/][OpenAL]] (with ALUT) for audio
- [[https://mesa3d.org/][OpenGL]] (GL, GLU, and GLUT) for graphics
- [[http://www.libpng.org/pub/png/libpng.html][PNG]] for 2D images
- [[https://www.libsdl.org][SDL]] to glue it al together

A joystick is recommended but it's possible to control the car with keys or a mouse.

Python is needed to run the random_road.py and random_track.py scripts.

* Build
Vamos is built with [[https://mesonbuild.com/][Meson]].

: mkdir build
: cd build
: meson setup
: ninja test (or build with another back-end)

* TODO Install
Not configured yet.

* Run
Since installation isn't implemented yet, cd to build/vamos so the relative path to the data directory is correct, and run ./vamos.

  Here are some command-line recipes
** Practice at Suzuka
Drive timed laps in a circa 2012 Formula One car at the famous figure-8 track.
: vamos -f -t Suzuka -c F1

You can see what tracks are available by listing the files in ../../data/tracks
if you're running from the build directory or
/usr/local/share/vamos/tracks if installed. 

** Watch the computer-controlled cars on a randomly generated track
: python ../../scripts/random_circuit.py
Preview.
: vamos -m -t /tmp/random-circuit.xm
Generate another or start the show.
: vamos -d -o 6 -t /tmp/random-circuit.xm
Remove the -d (demo) to race against the robots.

F9 cycles through views. F4 and F5 change the focused car.

** Qualify at Spa
: vamos -q -t Spa -o 5 -p 10

** Race from the qualifying positions from the last qualifying session
: vamos /tmp/vamos-qualifying
