#!/usr/bin/env python

##  trk-convert - Turn a RARS .trk file into the C++ code for a Vamos track.
##	This file is part of Vamos Automotive Simulator.
##  Copyright (C) 2001 Sam Varner
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Many thanks to those who produced the tracks for RARS, and to the
# developers who placed this project under the GPL.  I owe you.

# Usage: trk-convert trackfile.trk [ trackfile.cc ]

# If you don't specify at output file, the code is send to standard
# output.  After converting, save the file as `track.cc' and
# recomplie.  You need the file `trk-convert-header' in the current
# directory to produce the C++ file.

# notes on cleanup...

import sys
import re
from math import pi

header = """
  <!-- Sky Box -->

  <sky>
    <sides>textures/sky_sides.png</sides>
	<top>textures/sky_top.png</top>
	<bottom>textures/sky_bottom.png</bottom>
	<smooth/>
  </sky>

  <material name="track" type="asphalt">
	<friction>1.0</friction>
	<restitution>0.1</restitution>
	<rolling>1.0</rolling>
	<drag>0.0</drag>
	<bump-amplitude>0.01</bump-amplitude>
	<bump-wavelength>100.0</bump-wavelength>
	<texture>
	  <file>textures/track2.png</file>
	  <length>200.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="grass" type="grass">
	<friction>0.7</friction>
	<restitution>0.1</restitution>
	<rolling>5.0</rolling>
	<drag>20.0</drag>	
	<bump-amplitude>0.03</bump-amplitude>
	<bump-wavelength>2.0</bump-wavelength>
	<texture>
	  <file>textures/grass.png</file>
	  <width>10.0</width>
	  <length>12.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="gravel" type="gravel">
	<friction>0.8</friction>
	<restitution>0.0</restitution>
	<rolling>40.0</rolling>
	<drag>200.0</drag>	
	<bump-amplitude>0.05</bump-amplitude>
	<bump-wavelength>2.0</bump-wavelength>
	<texture>
	  <file>textures/gravel3.png</file>
	  <width>10.0</width>
	  <length>10.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="tires" type="rubber">
	<friction>1.0</friction>
	<restitution>0.8</restitution>
	<rolling>1.0</rolling>
	<drag>5.0</drag>
	<bump-amplitude>0.0</bump-amplitude>
	<bump-wavelength>1.0</bump-wavelength>
    <texture>
	  <file>textures/blue-tires.png</file>
	  <width>0.33</width>
	  <length>3.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="rail" type="metal">
	<friction>1.0</friction>
	<restitution>0.1</restitution>
	<rolling>1.0</rolling>
	<drag>0.0</drag>	
	<bump-amplitude>0.0</bump-amplitude>
	<bump-wavelength>1.0</bump-wavelength>
    <texture>
	  <file>textures/rail.png</file>
	  <width>0.5</width>
	  <length>10.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="wall" type="concrete">
	<friction>1.0</friction>
	<restitution>0.1</restitution>
	<rolling>1.0</rolling>
	<drag>0.0</drag>
	<bump-amplitude>0.0</bump-amplitude>
	<bump-wavelength>1.0</bump-wavelength>
	<texture>
	  <file>textures/wall.png</file>
	  <width>1.0</width>
	  <length>10.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <material name="kerb" type="concrete">
	<friction>1.0</friction>
	<restitution>0.1</restitution>
	<rolling>1.0</rolling>
	<drag>0.0</drag>
	<bump-amplitude>0.06</bump-amplitude>
	<bump-wavelength>2.0</bump-wavelength>
	<texture>
	  <file>textures/blue-kerb.png</file>
	  <width>2.0</width>
	  <length>4.0</length>
	  <smooth/>
	  <mipmap/>
	</texture>
  </material>

  <!-- Segment Properties -->

  <segment name="straight">
    [ wall grass kerb track kerb grass rail ]
  </segment>
  <segment name="straight pit">
    [ wall track kerb track kerb grass rail ]
  </segment>
  <segment name="left turn">
    [ wall grass kerb track kerb gravel tires ]
  </segment>
  <segment name="left turn pit">
    [ wall track kerb track kerb gravel tires ]
  </segment>
  <segment name="right turn">
    [ tires gravel kerb track kerb grass rail ]
  </segment>

  <!-- The track -->
"""

# Give a usage message if not enough arguments were passed or if the first
# argument can't be opened as a file.
help = 0
angle_type = ''
progname = sys.argv [0].split ('/')[-1]
trackfile = ''
close = 0
argv = sys.argv [1:]
argc = len (sys.argv)
if argc < 2 or argc > 4: help = 1
else:
	if argv [0] == '-r' or argv [0] == '--radians':
		angle_type = 'radians'
		argv = argv [1:]
	elif argv [0] == '-d' or argv [0] == '--degrees':
		angle_type = 'degrees'
		argv = argv [1:]
	elif argv [0] == '-l' or argv [0] == '--length':
		angle_type = 'length'
		argv = argv [1:]
	elif argv [0] == '-c' or argv [0] == '--close':
		close = 1
		argv = argv [1:]
	if argv:
		try:
			track = open (argv [0])
			trackfile = argv [0].split ('/')[-1]
		except IOError: help = 1

if help:
	print 'Usage: trk-convert [ [ -r | --radians ] | [ -d | --degrees ]'
	print '| [ -l | --length ] ] trackfile.trk [ trackfile.cc ]'
	sys.exit (1)
else:
	argv = argv [1:]
# If an output file argument is given, redirect the prints to the file.
if argv:
	sys.stdout = open (argv [0], 'w')

# Convert feet to meters.
def meters (feet):
	return feet * 0.3048  # exact

# This regex matches a straight or curve definition.
segment_regex = re.compile ('[ \t]*([-0-9\.]+)[ \t]+([0-9\.]+).*')
# Thas regex matches a line with only whitespace.
blank_regex = re.compile ('[ \t]*\n')

print '<?xml version="1.0"?>'
print '<!-- Converted from the RARS track file %s by %s. -->' % \
	  (trackfile, progname)
print '<track name="%s">' % trackfile
print header

# The .trk file has three sections separated by lines of whitespace.
# `section' is incremented when we start to read a new section.
section = 0
# The previous line read is saved so we can detect consecutive lines of
# whitespace.
last_line = ''

# Read in the file.
data = track.readlines ()

# Find the width of the track.
width = meters (float (data [2].split() [0]))

# Loop over the lines in the file.  Record the information about the track.
total_angle = 0.0
track = []
for line in data:

	# See if this line starts a new section.
	if blank_regex.match (line) and not blank_regex.match (last_line):
		section += 1
	last_line = line

	# Ignore the first two sections.
	if section < 3: continue

	# Get the numbers from the line.
	match = segment_regex.match (line)
	if not match: continue
	track.append ([float (match.group (1)), float (match.group (2))])
	if track [-1][0] > 0.0:
		total_angle += track [-1][1]
	elif track [-1][0] < 0.0:
		total_angle -= track [-1][1]

# Determine the quantity used along with the radius for defining curves.
total_angle = abs (total_angle)
if not angle_type:
	if abs (total_angle - 6.28) < 0.1:
		angle_type = 'radians'
	elif abs (total_angle - 360.0) < 5.0:
		angle_type = 'degrees'
	else:
		angle_type = 'length'

first_segment = 1

# Loop over the track information.
for line in track:

	# Convert the ASCII representation to floats.
	radius = line [0]
	length = line [1]

	# Convert feet to meters.
	radius = meters (radius)

	# Straights have a radius of 0.0
	if radius != 0.0: # This is a curve.

		# The length of a curve may be in feet or radians.  Which one is used
		# is not explicitly stated in the file format, so we have to guess.
		# I'll assume that we won't see and 6 radian curves.
		if angle_type == 'radians': # The length is in radians.
			# Put the length in meters.  (Length has already been converted.)
			length = abs (radius * length)
		elif angle_type == 'degrees':
			length = abs (radius * length * pi / 180.0)
		else:
			# The length must be a distance.  Convert to meters.
			length = meters (length)

		# Some right turns have very small radii.  I'm assuming that means
		# that the radius is measured to the right edge of the track.
		center_radius = radius - width / 2.0
		factor = center_radius / radius
		radius *= factor
		length *= factor

		# Put gravel on the outside of the cuves.
		if radius < 0.0:
			print '  <road segment="right turn">'
		else:
			print '  <road segment="left turn">'

		print '    <resolution>5.0</resolution>'

	else: # This is a straight.
		# Convert to meters.
		length = meters (length)
		print '  <road segment="straight">'
		print '    <resolution>10.0</resolution>'

	print '    <length>%f</length>' % length

	if radius != 0.0:
		print '    <radius>%f</radius>' % radius

	if first_segment:
		print '    <left-width>[ 0.0, 25.0 ]</left-width>'
		print '    <right-width>[ 0.0, 25.0 ]</right-width>'
		print '    <left-road-width>[ 0.0, 8.0 ]</left-road-width>'
		print '    <right-road-width>[ 0.0, 8.0 ]</right-road-width>'
		print '    <left-wall-height>2.0</left-wall-height>'
		print '    <right-wall-height>2.0</right-wall-height>'
		first_segment = 0

	print '  </road>'
	print

# Print out the end of the XML file.  I'ts not a good idea to try
# build_circuit before seeing how the conversion went.
print  '  <!-- Force the track to close -->'

if close == 1:
	print  '  <circuit/>'
else:
	print  '  <!-- <circuit/> -->'
print
print  '  <!-- Define the timing sectors -->'
print  '  <timing-line>10.0</timing-line>'
print  '  <timing-line>700.0</timing-line>'
print  '  <timing-line>1800.0</timing-line>'
print  '</track>'

